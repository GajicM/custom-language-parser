
//----------------------------------------------------
// The following code was generated by CUP v0.10k
// Sun Jan 01 15:17:27 CET 2023
//----------------------------------------------------

import java_cup.runtime.*;
import java.io.*;
import java.util.*;
import SymbolTable.*;

/** CUP v0.10k generated parser.
  * @version Sun Jan 01 15:17:27 CET 2023
  */
public class MPParser extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public MPParser() {super();}

  /** Constructor which sets the default scanner. */
  public MPParser(java_cup.runtime.Scanner s) {super(s);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\100\000\002\003\006\000\002\002\004\000\002\003" +
    "\006\000\002\003\005\000\002\003\004\000\002\004\005" +
    "\000\002\004\005\000\002\004\004\000\002\005\005\000" +
    "\002\005\005\000\002\021\005\000\002\021\003\000\002" +
    "\006\003\000\002\006\003\000\002\006\003\000\002\006" +
    "\003\000\002\016\004\000\002\016\004\000\002\016\003" +
    "\000\002\016\003\000\002\017\007\000\002\017\006\000" +
    "\002\017\007\000\002\017\007\000\002\017\003\000\002" +
    "\017\003\000\002\017\003\000\002\017\005\000\002\017" +
    "\006\000\002\024\012\000\002\025\007\000\002\025\011" +
    "\000\002\023\005\000\002\023\003\000\002\026\004\000" +
    "\002\022\003\000\002\022\005\000\002\007\005\000\002" +
    "\007\003\000\002\013\005\000\002\013\003\000\002\014" +
    "\005\000\002\014\003\000\002\015\003\000\002\015\003" +
    "\000\002\015\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\003\000\002\012\005\000\002" +
    "\012\005\000\002\012\003\000\002\010\005\000\002\010" +
    "\005\000\002\010\003\000\002\011\003\000\002\011\003" +
    "\000\002\011\005\000\002\020\003\000\002\020\003\000" +
    "\002\020\003\000\002\020\003\000\002\020\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\033\005\001\002\000\004\002\172\001" +
    "\002\000\006\003\006\014\007\001\002\000\004\002\ufffd" +
    "\001\002\000\006\003\011\015\010\001\002\000\006\003" +
    "\012\034\014\001\002\000\004\002\ufffe\001\002\000\004" +
    "\002\uffff\001\002\000\004\002\001\001\002\000\032\003" +
    "\030\004\034\005\016\006\015\007\022\021\023\026\035" +
    "\031\017\032\033\034\014\044\020\045\021\001\002\000" +
    "\004\014\166\001\002\000\004\021\ufff4\001\002\000\020" +
    "\003\077\014\074\021\117\022\102\023\073\024\072\025" +
    "\071\001\002\000\020\003\077\014\074\021\117\022\102" +
    "\023\073\024\072\025\071\001\002\000\020\003\077\014" +
    "\074\021\117\022\102\023\073\024\072\025\071\001\002" +
    "\000\004\014\147\001\002\000\006\014\064\016\065\001" +
    "\002\000\004\021\043\001\002\000\034\003\uffe7\004\uffe7" +
    "\005\uffe7\006\uffe7\007\uffe7\021\uffe7\026\uffe7\031\uffe7\032" +
    "\uffe7\034\uffe7\035\uffe7\044\uffe7\045\uffe7\001\002\000\034" +
    "\003\uffef\004\uffef\005\uffef\006\uffef\007\uffef\021\uffef\026" +
    "\uffef\031\uffef\032\uffef\034\uffef\035\uffef\044\uffef\045\uffef" +
    "\001\002\000\034\003\uffe9\004\uffe9\005\uffe9\006\uffe9\007" +
    "\uffe9\021\uffe9\026\uffe9\031\uffe9\032\uffe9\034\uffe9\035\uffe9" +
    "\044\uffe9\045\uffe9\001\002\000\036\002\ufffa\003\ufffa\004" +
    "\ufffa\005\ufffa\006\ufffa\007\ufffa\021\ufffa\026\ufffa\031\ufffa" +
    "\032\ufffa\034\ufffa\035\ufffa\044\ufffa\045\ufffa\001\002\000" +
    "\034\003\uffe8\004\uffe8\005\uffe8\006\uffe8\007\uffe8\021\uffe8" +
    "\026\uffe8\031\uffe8\032\uffe8\034\uffe8\035\uffe8\044\uffe8\045" +
    "\uffe8\001\002\000\034\003\uffee\004\uffee\005\uffee\006\uffee" +
    "\007\uffee\021\uffee\026\uffee\031\uffee\032\uffee\034\uffee\035" +
    "\uffee\044\uffee\045\uffee\001\002\000\004\021\ufff2\001\002" +
    "\000\004\021\ufff5\001\002\000\004\021\ufff3\001\002\000" +
    "\034\003\040\004\034\005\016\006\015\007\022\021\023" +
    "\026\035\031\017\032\033\034\014\035\042\044\020\045" +
    "\021\001\002\000\034\003\ufff0\004\ufff0\005\ufff0\006\ufff0" +
    "\007\ufff0\021\ufff0\026\ufff0\031\ufff0\032\ufff0\034\ufff0\035" +
    "\ufff0\044\ufff0\045\ufff0\001\002\000\036\002\ufffb\003\ufffb" +
    "\004\ufffb\005\ufffb\006\ufffb\007\ufffb\021\ufffb\026\ufffb\031" +
    "\ufffb\032\ufffb\034\ufffb\035\ufffb\044\ufffb\045\ufffb\001\002" +
    "\000\034\003\ufff1\004\ufff1\005\ufff1\006\ufff1\007\ufff1\021" +
    "\ufff1\026\ufff1\031\ufff1\032\ufff1\034\ufff1\035\ufff1\044\ufff1" +
    "\045\ufff1\001\002\000\036\002\ufffc\003\ufffc\004\ufffc\005" +
    "\ufffc\006\ufffc\007\ufffc\021\ufffc\026\ufffc\031\ufffc\032\ufffc" +
    "\034\ufffc\035\ufffc\044\ufffc\045\ufffc\001\002\000\012\003" +
    "\ufff6\014\051\017\ufff6\020\ufff6\001\002\000\010\003\046" +
    "\017\047\020\045\001\002\000\004\021\050\001\002\000" +
    "\034\003\ufff8\004\ufff8\005\ufff8\006\ufff8\007\ufff8\021\ufff8" +
    "\026\ufff8\031\ufff8\032\ufff8\034\ufff8\035\ufff8\044\ufff8\045" +
    "\ufff8\001\002\000\034\003\ufff9\004\ufff9\005\ufff9\006\ufff9" +
    "\007\ufff9\021\ufff9\026\ufff9\031\ufff9\032\ufff9\034\ufff9\035" +
    "\ufff9\044\ufff9\045\ufff9\001\002\000\010\003\ufff7\017\ufff7" +
    "\020\ufff7\001\002\000\012\004\034\005\016\026\035\032" +
    "\033\001\002\000\006\015\057\020\056\001\002\000\004" +
    "\021\055\001\002\000\006\015\uffe0\020\uffe0\001\002\000" +
    "\006\015\uffdf\020\uffdf\001\002\000\012\004\034\005\016" +
    "\026\035\032\033\001\002\000\004\034\060\001\002\000" +
    "\030\004\034\005\016\006\015\007\022\021\023\026\035" +
    "\031\017\032\033\034\014\044\020\045\021\001\002\000" +
    "\032\004\034\005\016\006\015\007\022\021\023\026\035" +
    "\031\017\032\033\034\014\035\062\044\020\045\021\001" +
    "\002\000\034\003\uffe4\004\uffe4\005\uffe4\006\uffe4\007\uffe4" +
    "\021\uffe4\026\uffe4\031\uffe4\032\uffe4\034\uffe4\035\uffe4\044" +
    "\uffe4\045\uffe4\001\002\000\006\015\uffe1\020\uffe1\001\002" +
    "\000\004\021\127\001\002\000\020\003\077\014\074\021" +
    "\075\022\102\023\073\024\072\025\071\001\002\000\044" +
    "\003\uffc8\010\uffc8\011\uffc8\012\uffc8\013\uffc8\015\uffc8\017" +
    "\uffc8\027\uffc8\030\uffc8\034\uffc8\036\uffc8\037\uffc8\040\uffc8" +
    "\041\uffc8\042\uffc8\043\uffc8\046\uffc8\001\002\000\016\015" +
    "\uffdb\017\uffdb\027\141\030\uffdb\034\uffdb\046\uffdb\001\002" +
    "\000\006\017\143\030\137\001\002\000\044\003\uffc5\010" +
    "\uffc5\011\uffc5\012\uffc5\013\uffc5\015\uffc5\017\uffc5\027\uffc5" +
    "\030\uffc5\034\uffc5\036\uffc5\037\uffc5\040\uffc5\041\uffc5\042" +
    "\uffc5\043\uffc5\046\uffc5\001\002\000\044\003\uffc4\010\uffc4" +
    "\011\uffc4\012\uffc4\013\uffc4\015\uffc4\017\uffc4\027\uffc4\030" +
    "\uffc4\034\uffc4\036\uffc4\037\uffc4\040\uffc4\041\uffc4\042\uffc4" +
    "\043\uffc4\046\uffc4\001\002\000\044\003\uffc3\010\uffc3\011" +
    "\uffc3\012\uffc3\013\uffc3\015\uffc3\017\uffc3\027\uffc3\030\uffc3" +
    "\034\uffc3\036\uffc3\037\uffc3\040\uffc3\041\uffc3\042\uffc3\043" +
    "\uffc3\046\uffc3\001\002\000\020\003\077\014\074\021\117" +
    "\022\102\023\073\024\072\025\071\001\002\000\040\003" +
    "\uffc9\010\uffc9\011\uffc9\012\uffc9\013\uffc9\014\126\017\uffc9" +
    "\027\uffc9\030\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9\042" +
    "\uffc9\043\uffc9\001\002\000\044\003\uffcd\010\uffcd\011\121" +
    "\012\uffcd\013\120\015\uffcd\017\uffcd\027\uffcd\030\uffcd\034" +
    "\uffcd\036\uffcd\037\uffcd\040\uffcd\041\uffcd\042\uffcd\043\uffcd" +
    "\046\uffcd\001\002\000\044\003\uffc2\010\uffc2\011\uffc2\012" +
    "\uffc2\013\uffc2\015\uffc2\017\uffc2\027\uffc2\030\uffc2\034\uffc2" +
    "\036\uffc2\037\uffc2\040\uffc2\041\uffc2\042\uffc2\043\uffc2\046" +
    "\uffc2\001\002\000\044\003\uffca\010\uffca\011\uffca\012\uffca" +
    "\013\uffca\015\uffca\017\uffca\027\uffca\030\uffca\034\uffca\036" +
    "\uffca\037\uffca\040\uffca\041\uffca\042\uffca\043\uffca\046\uffca" +
    "\001\002\000\040\003\114\010\113\012\104\015\uffd7\017" +
    "\uffd7\027\uffd7\030\uffd7\034\uffd7\036\115\037\107\040\105" +
    "\041\106\042\111\043\112\046\uffd7\001\002\000\044\003" +
    "\uffc6\010\uffc6\011\uffc6\012\uffc6\013\uffc6\015\uffc6\017\uffc6" +
    "\027\uffc6\030\uffc6\034\uffc6\036\uffc6\037\uffc6\040\uffc6\041" +
    "\uffc6\042\uffc6\043\uffc6\046\uffc6\001\002\000\016\015\uffd9" +
    "\017\uffd9\027\uffd9\030\uffd9\034\uffd9\046\uffd9\001\002\000" +
    "\020\003\077\014\074\021\117\022\102\023\073\024\072" +
    "\025\071\001\002\000\020\003\uffd4\014\uffd4\021\uffd4\022" +
    "\uffd4\023\uffd4\024\uffd4\025\uffd4\001\002\000\020\003\uffd3" +
    "\014\uffd3\021\uffd3\022\uffd3\023\uffd3\024\uffd3\025\uffd3\001" +
    "\002\000\020\003\uffd5\014\uffd5\021\uffd5\022\uffd5\023\uffd5" +
    "\024\uffd5\025\uffd5\001\002\000\020\003\077\014\074\021" +
    "\117\022\102\023\073\024\072\025\071\001\002\000\020" +
    "\003\uffd2\014\uffd2\021\uffd2\022\uffd2\023\uffd2\024\uffd2\025" +
    "\uffd2\001\002\000\020\003\uffd1\014\uffd1\021\uffd1\022\uffd1" +
    "\023\uffd1\024\uffd1\025\uffd1\001\002\000\020\003\077\014" +
    "\074\021\117\022\102\023\073\024\072\025\071\001\002" +
    "\000\020\003\uffd0\014\uffd0\021\uffd0\022\uffd0\023\uffd0\024" +
    "\uffd0\025\uffd0\001\002\000\020\003\uffd6\014\uffd6\021\uffd6" +
    "\022\uffd6\023\uffd6\024\uffd6\025\uffd6\001\002\000\044\003" +
    "\uffcf\010\uffcf\011\121\012\uffcf\013\120\015\uffcf\017\uffcf" +
    "\027\uffcf\030\uffcf\034\uffcf\036\uffcf\037\uffcf\040\uffcf\041" +
    "\uffcf\042\uffcf\043\uffcf\046\uffcf\001\002\000\044\003\uffc9" +
    "\010\uffc9\011\uffc9\012\uffc9\013\uffc9\015\uffc9\017\uffc9\027" +
    "\uffc9\030\uffc9\034\uffc9\036\uffc9\037\uffc9\040\uffc9\041\uffc9" +
    "\042\uffc9\043\uffc9\046\uffc9\001\002\000\020\003\077\014" +
    "\074\021\117\022\102\023\073\024\072\025\071\001\002" +
    "\000\020\003\077\014\074\021\117\022\102\023\073\024" +
    "\072\025\071\001\002\000\044\003\uffcb\010\uffcb\011\uffcb" +
    "\012\uffcb\013\uffcb\015\uffcb\017\uffcb\027\uffcb\030\uffcb\034" +
    "\uffcb\036\uffcb\037\uffcb\040\uffcb\041\uffcb\042\uffcb\043\uffcb" +
    "\046\uffcb\001\002\000\044\003\uffcc\010\uffcc\011\uffcc\012" +
    "\uffcc\013\uffcc\015\uffcc\017\uffcc\027\uffcc\030\uffcc\034\uffcc" +
    "\036\uffcc\037\uffcc\040\uffcc\041\uffcc\042\uffcc\043\uffcc\046" +
    "\uffcc\001\002\000\022\010\113\012\104\015\uffd8\017\uffd8" +
    "\027\uffd8\030\uffd8\034\uffd8\046\uffd8\001\002\000\044\003" +
    "\uffce\010\uffce\011\121\012\uffce\013\120\015\uffce\017\uffce" +
    "\027\uffce\030\uffce\034\uffce\036\uffce\037\uffce\040\uffce\041" +
    "\uffce\042\uffce\043\uffce\046\uffce\001\002\000\004\021\127" +
    "\001\002\000\006\015\uffde\020\uffde\001\002\000\006\015" +
    "\132\020\131\001\002\000\004\021\134\001\002\000\004" +
    "\017\133\001\002\000\034\003\uffe2\004\uffe2\005\uffe2\006" +
    "\uffe2\007\uffe2\021\uffe2\026\uffe2\031\uffe2\032\uffe2\034\uffe2" +
    "\035\uffe2\044\uffe2\045\uffe2\001\002\000\006\015\uffdd\020" +
    "\uffdd\001\002\000\006\015\136\030\137\001\002\000\044" +
    "\003\uffc7\010\uffc7\011\uffc7\012\uffc7\013\uffc7\015\uffc7\017" +
    "\uffc7\027\uffc7\030\uffc7\034\uffc7\036\uffc7\037\uffc7\040\uffc7" +
    "\041\uffc7\042\uffc7\043\uffc7\046\uffc7\001\002\000\020\003" +
    "\077\014\074\021\117\022\102\023\073\024\072\025\071" +
    "\001\002\000\016\015\uffdc\017\uffdc\027\141\030\uffdc\034" +
    "\uffdc\046\uffdc\001\002\000\020\003\077\014\074\021\117" +
    "\022\102\023\073\024\072\025\071\001\002\000\016\015" +
    "\uffda\017\uffda\027\uffda\030\uffda\034\uffda\046\uffda\001\002" +
    "\000\034\003\uffec\004\uffec\005\uffec\006\uffec\007\uffec\021" +
    "\uffec\026\uffec\031\uffec\032\uffec\034\uffec\035\uffec\044\uffec" +
    "\045\uffec\001\002\000\006\015\145\020\131\001\002\000" +
    "\004\017\146\001\002\000\034\003\uffe3\004\uffe3\005\uffe3" +
    "\006\uffe3\007\uffe3\021\uffe3\026\uffe3\031\uffe3\032\uffe3\034" +
    "\uffe3\035\uffe3\044\uffe3\045\uffe3\001\002\000\020\003\077" +
    "\014\074\021\117\022\102\023\073\024\072\025\071\001" +
    "\002\000\006\015\151\030\137\001\002\000\004\017\152" +
    "\001\002\000\034\003\uffea\004\uffea\005\uffea\006\uffea\007" +
    "\uffea\021\uffea\026\uffea\031\uffea\032\uffea\034\uffea\035\uffea" +
    "\044\uffea\045\uffea\001\002\000\006\030\137\046\154\001" +
    "\002\000\030\004\034\005\016\006\015\007\022\021\023" +
    "\026\035\031\017\032\033\034\014\044\020\045\021\001" +
    "\002\000\004\021\157\001\002\000\034\003\uffe5\004\uffe5" +
    "\005\uffe5\006\uffe5\007\uffe5\021\uffe5\026\uffe5\031\uffe5\032" +
    "\uffe5\034\uffe5\035\uffe5\044\uffe5\045\uffe5\001\002\000\004" +
    "\014\051\001\002\000\006\017\161\030\137\001\002\000" +
    "\034\003\uffe6\004\uffe6\005\uffe6\006\uffe6\007\uffe6\021\uffe6" +
    "\026\uffe6\031\uffe6\032\uffe6\034\uffe6\035\uffe6\044\uffe6\045" +
    "\uffe6\001\002\000\006\030\137\034\163\001\002\000\030" +
    "\004\034\005\016\006\015\007\022\021\023\026\035\031" +
    "\017\032\033\034\014\044\020\045\021\001\002\000\004" +
    "\035\165\001\002\000\034\003\uffed\004\uffed\005\uffed\006" +
    "\uffed\007\uffed\021\uffed\026\uffed\031\uffed\032\uffed\034\uffed" +
    "\035\uffed\044\uffed\045\uffed\001\002\000\004\021\167\001" +
    "\002\000\004\015\170\001\002\000\004\017\171\001\002" +
    "\000\034\003\uffeb\004\uffeb\005\uffeb\006\uffeb\007\uffeb\021" +
    "\uffeb\026\uffeb\031\uffeb\032\uffeb\034\uffeb\035\uffeb\044\uffeb" +
    "\045\uffeb\001\002\000\004\002\000\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\170\000\004\003\003\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\004\012\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\004\026\005\025\006\023\016\035" +
    "\017\031\024\030\025\024\001\001\000\002\001\001\000" +
    "\002\001\001\000\020\007\161\010\075\011\077\012\100" +
    "\013\066\014\102\020\065\001\001\000\020\007\157\010" +
    "\075\011\077\012\100\013\066\014\102\020\065\001\001" +
    "\000\020\007\152\010\075\011\077\012\100\013\066\014" +
    "\102\020\065\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\021\043\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\016\004\026\005\036\006\023\017\040" +
    "\024\030\025\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\010\006\052\023\051" +
    "\026\053\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\006\006\052\026\062" +
    "\001\001\000\002\001\001\000\020\004\026\005\025\006" +
    "\023\016\060\017\031\024\030\025\024\001\001\000\016" +
    "\004\026\005\036\006\023\017\040\024\030\025\024\001" +
    "\001\000\002\001\001\000\002\001\001\000\004\022\143" +
    "\001\001\000\020\007\067\010\075\011\077\012\100\013" +
    "\066\014\102\020\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\020\007\134\010\075\011\077" +
    "\012\100\013\066\014\102\020\065\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\004\015\107\001\001\000\002\001\001\000\002\001" +
    "\001\000\010\010\124\011\077\020\065\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\012\010" +
    "\075\011\077\012\123\020\065\001\001\000\002\001\001" +
    "\000\002\001\001\000\010\010\115\011\077\020\065\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\006\011\122\020\065\001\001\000" +
    "\006\011\121\020\065\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\004\022" +
    "\127\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\016\010\075" +
    "\011\077\012\100\013\137\014\102\020\065\001\001\000" +
    "\002\001\001\000\014\010\075\011\077\012\100\014\141" +
    "\020\065\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\020" +
    "\007\147\010\075\011\077\012\100\013\066\014\102\020" +
    "\065\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\014\004\026\006\154\017" +
    "\155\024\030\025\024\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\014\004\026\006\154\017\163" +
    "\024\030\025\024\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$MPParser$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$MPParser$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$MPParser$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 1;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}


  /** User initialization code. */
  public void user_init() throws java.lang.Exception
    {

	symbolTable = new SymbolTable();

    }



   public int errNo = 0;
   public int warnNo = 0;

   SymbolTable symbolTable;

   public static void main( String[] args )
   {
      try
	  {
		   FileReader file = new FileReader( args[0] );
		   java_cup.runtime.Scanner scanner = new MPLexer( file );
		   MPParser parser = new MPParser( scanner );
		   parser.parse();
		   parser.checkWarnings();
		   if ( parser.errNo == 0 && parser.warnNo == 0 )
		      System.out.println( "Analiza zavrsena. U kodu nema gresaka." );
		   else
		      System.out.println( "Analiza zavrsena. Broj gresaka: " + parser.errNo
		         + " Broj upozorenja: " + parser.warnNo );
	  }
	  catch( Exception e )
	  {
		   System.out.println(e);
	  }
   }

   public void checkWarnings()
   {
      SymbolNode current = symbolTable.getVariables();
      while ( current != null )
      {
      	Variable var = ( Variable ) current;
      	if ( var.last_def == -1 && var.last_use == -1 )
      	{
      		System.out.println( "Upozorenje: Promenljiva " + var.name +
      			" je deklarisana, ali se nigde ne koristi." );
      		warnNo++;
      	}
      	else if ( var.last_def > var.last_use )
      	{
      		System.out.println( "Upozorenje: Vrednost dodeljena promeljivoj " +
      		    var.name + " u liniji " + var.last_def + " se nigde ne koristi." );
      		warnNo++;
      	}
      	current = current.next;
     }
   }

   public void syntax_error(Symbol cur_token)
   {

   }

   public void report_error(String message, Object info)
   {
   	   System.out.print( message );
   }

   public int getLine()
   {
   	  return (( MPLexer) getScanner()).getLine();
   }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$MPParser$actions {
  private final MPParser parser;

  /** Constructor */
  CUP$MPParser$actions(MPParser parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$MPParser$do_action(
    int                        CUP$MPParser$act_num,
    java_cup.runtime.lr_parser CUP$MPParser$parser,
    java.util.Stack            CUP$MPParser$stack,
    int                        CUP$MPParser$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$MPParser$result;

      /* select the action based on the action number */
      switch (CUP$MPParser$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 63: // Const ::= error 
            {
              Constant RESULT = null;
		System.out.println("GRESKA NE POSTOJI KONST");
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 62: // Const ::= CHARCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Character c = (Character)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 55");
           RESULT = new Constant( parser.symbolTable.getType( "char" ), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 61: // Const ::= BOOLCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Boolean c = (Boolean)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 54");
           RESULT = new Constant( parser.symbolTable.getType( "bool" ), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 60: // Const ::= REALCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Double c = (Double)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 53");
          RESULT = new Constant( parser.symbolTable.getType( "real" ), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 59: // Const ::= INTCONST 
            {
              Constant RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Integer c = (Integer)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 52");
          RESULT = new Constant( parser.symbolTable.getType( "integer" ), c );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(14/*Const*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 58: // Factor ::= LEFTPAR Expression RIGHTPAR 
            {
              Type RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
            System.out.println("Redukcija 51");
            RESULT=e;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 57: // Factor ::= Const 
            {
              Type RESULT = null;
		int cleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int cright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Constant c = (Constant)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 50");
            RESULT=c.type;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 56: // Factor ::= ID 
            {
              Type RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
		   System.out.println("Redukcija 49");
		      Variable var = parser.symbolTable.getVar( ime );
		      if ( var == null )
		      {
		      	System.out.println( "Greska u liniji " + parser.getLine() +
		      		": promenljiva " + ime + " nije deklarisana.");
		      	RESULT = parser.symbolTable.getType( "unknown" );
		      	parser.errNo++;
		      }
		      else
		      {
		      	RESULT = var.type;
		      	if ( var.last_def == -1 )
		      	{
		      		System.out.println( "Greska u liniji " + parser.getLine() +
		      			": promenljiva " + ime + " nije inicijalizovana.");
		      		parser.errNo++;
		      	}
		        var.last_use = parser.getLine();
		      }
		   
              CUP$MPParser$result = new java_cup.runtime.Symbol(7/*Factor*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 55: // Term ::= Factor 
            {
              Type RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type f = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 48");
            RESULT=f;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 54: // Term ::= Term DIV Factor 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              System.out.println("Redukcija 47");
              if (i1.tkind == Type.UNKNOWN || i2.tkind == Type.UNKNOWN || i1.tkind == Type.BOOL || i2.tkind == Type.BOOL ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": mogu se deliti samo numericki tipovi, lefi op je " + i1.tkind + ", desni op je " + i2.tkind );
                  parser.errNo++;
                  RESULT = parser.symbolTable.getType( "unknown" );
              }else if ( i1.tkind != i2.tkind ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": za operaciju deljenja operandi moraju biti istog tipa");
              	parser.errNo++;
              	RESULT = parser.symbolTable.getType( "unknown" );
              }else{
                RESULT = i1.type;
              }
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 53: // Term ::= Term MUL Factor 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              System.out.println("Redukcija 46");
              if (i1.tkind == Type.UNKNOWN || i2.tkind == Type.UNKNOWN || i1.tkind == Type.BOOL || i2.tkind == Type.BOOL ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": mogu se mnoziti samo numericki tipovi, lefi op je " + i1.tkind + ", desni op je " + i2.tkind );
                  parser.errNo++;
                  RESULT = parser.symbolTable.getType( "unknown" );
              }else if ( i1.tkind != i2.tkind ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": za mnozenje operandi moraju biti istog tipa");
              	parser.errNo++;
              	RESULT = parser.symbolTable.getType( "unknown" );
              }else{
                RESULT = i1.type;
              }
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(6/*Term*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // ArithExpression ::= Term 
            {
              Type RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 45");
            RESULT=t;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ArithExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // ArithExpression ::= ArithExpression MINUS Term 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              System.out.println("Redukcija 44");
              if (i1.tkind == Type.UNKNOWN || i2.tkind == Type.UNKNOWN || i1.tkind == Type.BOOL || i2.tkind == Type.BOOL ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": mogu se oduzimati samo numericki tipovi, lefi op je " + i1.tkind + ", desni op je " + i2.tkind );
                  parser.errNo++;
                  RESULT = parser.symbolTable.getType( "unknown" );
              }else if ( i1.tkind != i2.tkind ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": za operaciju oduzimanja operandi moraju biti istog tipa");
              	parser.errNo++;
              	RESULT = parser.symbolTable.getType( "unknown" );
              }else{
                RESULT = i1.type;
              }
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ArithExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // ArithExpression ::= ArithExpression PLUS Term 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
              System.out.println("Redukcija 43");
              if (i1.tkind == Type.UNKNOWN || i2.tkind == Type.UNKNOWN || i1.tkind == Type.BOOL || i2.tkind == Type.BOOL ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": mogu se sabirati samo numericki tipovi, lefi op je " + i1.tkind + ", desni op je " + i2.tkind );
                  parser.errNo++;
                  RESULT = parser.symbolTable.getType( "unknown" );
              }else if ( i1.tkind != i2.tkind ){
                  System.out.println("Greska u liniji " + parser.getLine() + ": za operaciju sabiranja operandi moraju biti istog tipa");
              	parser.errNo++;
              	RESULT = parser.symbolTable.getType( "unknown" );
              }else{
                RESULT = i1.type;
              }
          
              CUP$MPParser$result = new java_cup.runtime.Symbol(8/*ArithExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // CompOp ::= error 
            {
              Object RESULT = null;
		
         System.out.println("GRESKA: U LINIJI "+ parser.getLine());
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*CompOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // CompOp ::= GREATEREQ 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 42");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*CompOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // CompOp ::= GREATER 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 41");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*CompOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // CompOp ::= NOTEQUAL 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 40");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*CompOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CompOp ::= EQEQ 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 39");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*CompOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CompOp ::= LESSEQ 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 38");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*CompOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // CompOp ::= LESS 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 37");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(11/*CompOp*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // CompExpression ::= ArithExpression 
            {
              Type RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 36");
            RESULT=a;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*CompExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // CompExpression ::= ArithExpression CompOp ArithExpression 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                    System.out.println("Redukcija 35");
                    if (i1.tkind == Type.BOOL || i2.tkind == Type.BOOL ||
                        i1.tkind == Type.UNKNOWN || i2.tkind == Type.UNKNOWN) {
                        System.out.println("Error in line " + parser.getLine() + ": " + " operandi moraju biti numerickog tipa");
                        parser.errNo++;
                        RESULT = parser.symbolTable.getType( "unknown" );
                    }
                    else {
                        RESULT = parser.symbolTable.getType( "bool" );
                    }
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(10/*CompExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AndExpression ::= CompExpression 
            {
              Type RESULT = null;
		int rleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int rright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type r = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 34");
            RESULT=r;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AndExpression ::= AndExpression AND CompExpression 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                     System.out.println("Redukcija 33");
                    if (i1.tkind != Type.BOOL || i2.tkind != Type.BOOL) {
                        System.out.println("Error in line " + parser.getLine() + ": " + " ne mogu se koristiti logicki operatori sa vrednostima koje nisu BOOL");
                        parser.errNo++;
                        RESULT = parser.symbolTable.getType( "unknown" );
                    }
                    else {
                        RESULT = parser.symbolTable.getType( "bool" );
                    }
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(9/*AndExpression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // Expression ::= AndExpression 
            {
              Type RESULT = null;
		int aleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int aright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type a = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
            System.out.println("Redukcija 32");
            RESULT=a;
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // Expression ::= Expression OR AndExpression 
            {
              Type RESULT = null;
		int i1left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int i1right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type i1 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int i2left = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int i2right = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Type i2 = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                     System.out.println("Redukcija 31");
                    if (i1.tkind != Type.BOOL || i2.tkind != Type.BOOL) {
                        System.out.println("Error in line " + parser.getLine() + ": " + " ne mogu se koristiti logicki operatori sa vrednostima koje nisu BOOL");
                        parser.errNo++;
                        RESULT = parser.symbolTable.getType( "unknown" );
                    }
                    else {
                        RESULT = parser.symbolTable.getType( "bool" );
                    }
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(5/*Expression*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // ArgList ::= ArgList COMMA ID 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
   System.out.println("Redukcija 30");
  			 	RESULT = niz;
  			 	RESULT.add( ime );
  
              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*ArgList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // ArgList ::= ID 
            {
              ArrayList RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		

RESULT=new ArrayList();
RESULT.add(ime);
System.out.println("redukcija 29");

              CUP$MPParser$result = new java_cup.runtime.Symbol(16/*ArgList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // ParamDecl ::= Type ID 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
System.out.println("redukcija 28");
parser.symbolTable.addVar(ime,t);
Variable v=parser.symbolTable.getVar(ime);
v.last_def = -2;
RESULT=v;

              CUP$MPParser$result = new java_cup.runtime.Symbol(20/*ParamDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // ParamList ::= ParamDecl 
            {
              ArrayList RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object ime = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT= new ArrayList();
    RESULT.add(ime);
    System.out.println("redukcija 27");

              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*ParamList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // ParamList ::= ParamList COMMA ParamDecl 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object ime = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
    RESULT=niz;
    RESULT.add(ime);
    System.out.println("redukcija 26");
 
              CUP$MPParser$result = new java_cup.runtime.Symbol(17/*ParamList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // FunctionCall ::= ID ASSIGN ID LEFTPAR ArgList RIGHTPAR SEMI 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList args = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
System.out.println("redukcija 25");
   Function ff= parser.symbolTable.getFunction(f);
   if (!parser.symbolTable.checkFArgs(ff,args))
        System.out.println("Greska u liniji broj"+ parser.getLine() +" pogresan broj parametara za poziv fje "+f);

              CUP$MPParser$result = new java_cup.runtime.Symbol(19/*FunctionCall*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // FunctionCall ::= ID LEFTPAR ArgList RIGHTPAR SEMI 
            {
              Object RESULT = null;
		int fleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left;
		int fright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).right;
		String f = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).value;
		int argsleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int argsright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList args = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
    System.out.println("redukcija 24");

   Function ff= parser.symbolTable.getFunction(f);
   System.out.println(ff);
        if (!parser.symbolTable.checkFArgs(ff,args)) System.out.println("Greska u liniji broj"+ parser.getLine() +" pogresan broj parametara za poziv fje "+f);

              CUP$MPParser$result = new java_cup.runtime.Symbol(19/*FunctionCall*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // FunctionDecl ::= Type ID LEFTPAR ParamList RIGHTPAR LEFTCURLY StatementList RIGHTCURLY 
            {
              Object RESULT = null;
		int tipleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left;
		int tipright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).right;
		Type tip = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-6)).value;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).value;
		
        System.out.println("Rdukcija 23");
       if(! parser.symbolTable.addFunction(ime,tip,niz)) System.out.println("UPOZORENJE: FUNKCIJA VEC POSTOJI");;

              CUP$MPParser$result = new java_cup.runtime.Symbol(18/*FunctionDecl*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-7)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // Statement ::= IF Expression THEN Statement 
            {
              Object RESULT = null;
		System.out.println("Redukcija 22");
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // Statement ::= RETURN Expression SEMI 
            {
              Object RESULT = null;
		System.out.println("Redukcija 21");
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // Statement ::= FunctionCall 
            {
              Object RESULT = null;
		System.out.println("Redukcija 20");
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // Statement ::= FunctionDecl 
            {
              Object RESULT = null;
		System.out.println("Redukcija 19");
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // Statement ::= Block 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 18");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // Statement ::= WRITE LEFTPAR Expression RIGHTPAR SEMI 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 17");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // Statement ::= READ LEFTPAR ID RIGHTPAR SEMI 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		
                                System.out.println("Redukcija 16");
                              Variable var = parser.symbolTable.getVar( ime );
                              if ( var == null )
                              {
                                System.out.println( "Greska u liniji " + parser.getLine() +
                                    ": promenljiva " + ime + " nije deklarisana.");
                                RESULT = parser.symbolTable.getType( "unknown" );
                                parser.errNo++;
                              }
                              else
                              {
                                if ( var.last_def == -1 )
                                {
                                    System.out.println( "Greska u liniji " + parser.getLine() +
                                        ": promenljiva " + ime + " nije inicijalizovana.");
                                    parser.errNo++;
                                }
                                var.last_use = parser.getLine();
                              }
                           
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // Statement ::= ID ASSIGN Expression SEMI 
            {
              Object RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		int ileft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int iright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Type i = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
                              System.out.println("Redukcija 15");
                              Variable var = parser.symbolTable.getVar( ime );
                              if ( var == null ){
                                System.out.println( "Greska u liniji " + parser.getLine() +
                                    ": promenljiva " + ime + " nije deklarisana.");
                                parser.errNo++;
                              }else{
                                   var.last_def = parser.getLine();
                              }
                              if (var.type.tkind != i.tkind){
                                System.out.println( "Greska u liniji " + parser.getLine() +
                                    ": ne moze se odraditi dodela vrednosti razlicitih tipova");
                                parser.errNo++;
                              }
                         
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // Statement ::= WHILE Expression LEFTCURLY Statement RIGHTCURLY 
            {
              Object RESULT = null;
		int eleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left;
		int eright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).right;
		Type e = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).value;
		
                                System.out.println("Redukcija 14");
                                 if ( e.tkind != Type.BOOL)
                                  {
                                    System.out.println("Greska u liniji " + parser.getLine() + ": " +
                                       "expression u while nije tipa bool");
                                    parser.errNo++;
                                  }
                         
              CUP$MPParser$result = new java_cup.runtime.Symbol(13/*Statement*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-4)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // StatementList ::= Statement 
            {
              Object RESULT = null;
		System.out.println("redukcija 13");
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // StatementList ::= VarDeclaration 
            {
              Object RESULT = null;
		System.out.println("redukcija 12");
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // StatementList ::= StatementList VarDeclaration 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija 11");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // StatementList ::= StatementList Statement 
            {
              Object RESULT = null;
		
            System.out.println("Redukcija  10");
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(12/*StatementList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // Type ::= BOOL 
            {
              Type RESULT = null;
		
            System.out.println("Redukcija 9");
            RESULT = parser.symbolTable.getType( "bool" );
         
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // Type ::= REAL 
            {
              Type RESULT = null;
		
           System.out.println("Redukcija 8");
           RESULT = parser.symbolTable.getType( "real" );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // Type ::= CHAR 
            {
              Type RESULT = null;
		
           System.out.println("Redukcija 7");
           RESULT = parser.symbolTable.getType( "char" );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // Type ::= INTEGER 
            {
              Type RESULT = null;
		
           System.out.println("Redukcija 6");
           RESULT = parser.symbolTable.getType( "integer" );
        
              CUP$MPParser$result = new java_cup.runtime.Symbol(4/*Type*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // NameList ::= ID 
            {
              ArrayList RESULT = null;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
                System.out.println("Redukcija 5");
                RESULT = new ArrayList();
                RESULT.add( ime );
             
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // NameList ::= NameList COMMA ID 
            {
              ArrayList RESULT = null;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int imeleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int imeright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		String ime = (String)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
			    System.out.println("Redukcija 4");
			 	RESULT = niz;
			 	RESULT.add( ime );
			 
              CUP$MPParser$result = new java_cup.runtime.Symbol(15/*NameList*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // VarDeclaration ::= Type NameList error 
            {
              Object RESULT = null;
		
				    System.out.println("Fali ; u liniji "+(parser.getLine()-1));
				    parser.errNo++;
				
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*VarDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // VarDeclaration ::= Type NameList SEMI 
            {
              Object RESULT = null;
		int tleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left;
		int tright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).right;
		Type t = (Type)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).value;
		int nizleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int nizright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		ArrayList niz = (ArrayList)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		
				    System.out.println("Redukcija 3");
					for ( int i=0; i<niz.size(); i++ )
					{
					   String ime = (String) niz.get(i);

					   if ( ! parser.symbolTable.addVar( ime, t ) )
					   {
					        if(parser.symbolTable.getVar(ime).last_def!=-2){
					   	 System.out.println( "Greska u liniji " + parser.getLine() + ": " +
                   			"Promenljiva " + ime + " je vec deklarisana." );
            		     parser.errNo++;
            		     }
					   }
					}
				
              CUP$MPParser$result = new java_cup.runtime.Symbol(3/*VarDeclaration*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // Block ::= LEFTCURLY error 
            {
              Object RESULT = null;
		
			 System.out.println("GRESKA:blok koda pogresno definisan");
			    parser.errNo++;
			 
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // Block ::= LEFTCURLY StatementList error 
            {
              Object RESULT = null;
		
			 System.out.println("GRESKA:Nedostaje } u bloku");
			    parser.errNo++;
			 
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // Block ::= LEFTCURLY StatementList RIGHTCURLY 
            {
              Object RESULT = null;
		
			 	System.out.println("Redukcija 2");
			 
              CUP$MPParser$result = new java_cup.runtime.Symbol(2/*Block*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // Program ::= MAIN error 
            {
              Object RESULT = null;
		
                 System.out.println( "Nedostaje zagrada na pocetku " );
                 parser.errNo++;
               
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // Program ::= MAIN LEFTPAR error 
            {
              Object RESULT = null;
		
                    System.out.println( "Nedostaje zagrada na pocetku " );
                    parser.errNo++;
            
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-2)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // Program ::= MAIN LEFTPAR RIGHTPAR error 
            {
              Object RESULT = null;
		
                     System.out.println( "Blok koda nije dobro napisan" );
                     parser.errNo++;
                
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // $START ::= Program EOF 
            {
              Object RESULT = null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).value;
		RESULT = start_val;
              CUP$MPParser$result = new java_cup.runtime.Symbol(0/*$START*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-1)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          /* ACCEPT */
          CUP$MPParser$parser.done_parsing();
          return CUP$MPParser$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // Program ::= MAIN LEFTPAR RIGHTPAR Block 
            {
              Object RESULT = null;
		int bleft = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).left;
		int bright = ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right;
		Object b = (Object)((java_cup.runtime.Symbol) CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).value;
		
			 	System.out.println("Redukcija 1");
			 
              CUP$MPParser$result = new java_cup.runtime.Symbol(1/*Program*/, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-3)).left, ((java_cup.runtime.Symbol)CUP$MPParser$stack.elementAt(CUP$MPParser$top-0)).right, RESULT);
            }
          return CUP$MPParser$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}

